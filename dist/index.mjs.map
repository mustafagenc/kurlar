{"version":3,"sources":["../src/index.ts","../src/helpers.ts"],"names":["getEncoding","date","firstUtfDate","formatToTwoDigits","value","getApiUrl","url","encoding","today","year","month","day","fetchAllCurrencies","__async","apiUrl","currencyResponses","response","axios","XMLValidator","options","json","XMLParser","item","error","fetchCurrency","_0","currency","allCurrencies"],"mappings":"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","file":"index.mjs","sourcesContent":["import { XMLParser, XMLValidator, type X2jOptions } from \"fast-xml-parser\";\nimport axios from \"axios\";\nimport type { TCMBResponseType, TcmbType } from \"./types\";\nimport { getApiUrl } from \"./helpers\";\n\n/// Function to fetch all exchange rates for a given date\n/// @param date - The date for which to fetch exchange rates\n/// @returns An array of all exchange rates or null if no data is found\nasync function fetchAllCurrencies(\n  date?: Date\n): Promise<TCMBResponseType[] | null> {\n  const apiUrl = getApiUrl({ date: date });\n  const currencyResponses: TCMBResponseType[] = [];\n\n  try {\n    const response = await axios.get(apiUrl.url, {\n      headers: {\n        Accept:\n          \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n        \"Accept-Language\": \"en-US,en;q=0.8,tr;q=0.6\",\n        \"Accept-Charset\": apiUrl.encoding,\n      },\n    });\n\n    const result = XMLValidator.validate(response.data);\n\n    if (result !== true) {\n      throw new Error(\"Invalid XML response\");\n    }\n\n    const options: X2jOptions = {\n      ignoreAttributes: false,\n      allowBooleanAttributes: true,\n      ignoreDeclaration: true,\n      attributeNamePrefix: \"@_\",\n      trimValues: true,\n    };\n\n    const parser = new XMLParser(options);\n    const json = parser.parse(response.data);\n\n    for (const item of json.Tarih_Date.Currency) {\n      currencyResponses.push({\n        Unit: item.Unit,\n        CurrencyName: item.CurrencyName,\n        CurrencyCode: item[\"@_CurrencyCode\"],\n        ForexBuying: item.ForexBuying,\n        ForexSelling: item.ForexSelling,\n        BanknoteBuying: item.BanknoteBuying,\n        BanknoteSelling: item.BanknoteSelling,\n      });\n    }\n\n    return currencyResponses.length > 0 ? currencyResponses : null;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/// Function to fetch a specific currency's exchange rate for a given date\n/// @param currency - The currency code to fetch (e.g., \"USD\")\n/// @param date - The date for which to fetch the exchange rate\n/// @returns The exchange rate for the specified currency or null if not found\nasync function fetchCurrency({\n  currency,\n  date,\n}: TcmbType): Promise<TCMBResponseType | null> {\n  const allCurrencies = await fetchAllCurrencies(date);\n\n  if (!allCurrencies) {\n    return null;\n  }\n\n  const currencyResponse = allCurrencies.find(\n    (item) => item.CurrencyCode === currency\n  );\n\n  return currencyResponse || null;\n}\n\nexport { fetchAllCurrencies, fetchCurrency };\n","import type { EncodingType, UrlType } from \"./types\";\n\nfunction getEncoding({ date }: { date: Date }): EncodingType {\n  const firstUtfDate: Date = new Date(2016, 8, 8);\n  const currentDate: Date = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n  );\n  if (currentDate >= firstUtfDate) return \"UTF-8\";\n  return \"ISO-8859-9\";\n}\n\nfunction formatToTwoDigits(value: number): string {\n  return value < 10 ? `0${value}` : `${value}`;\n}\n\nfunction getApiUrl({ date }: { date?: Date }): UrlType {\n  let url = \"https://www.tcmb.gov.tr/kurlar/today.xml\";\n  let encoding = \"UTF-8\";\n\n  if (date) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const inputDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n\n    if (inputDate <= today) {\n      const year = date.getFullYear();\n      const month = formatToTwoDigits(date.getMonth());\n      const day = formatToTwoDigits(date.getDate());\n\n      url = `https://www.tcmb.gov.tr/kurlar/${year}${month}/${day}${month}${year}.xml`;\n      encoding = getEncoding({ date });\n    }\n  }\n\n  return {\n    url: url,\n    encoding: encoding,\n  };\n}\n\nexport { getEncoding, formatToTwoDigits, getApiUrl };\n"]}